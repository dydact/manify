# =============================================================================
# Project Configuration
# =============================================================================

[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "manify"
version = "0.0.2"
description = "Manifold-based machine learning"
authors = [
    { name = "Philippe Chlenski", email = "pac@cs.columbia.edu"},
    { name = "Kaizhu Du", email = "kd2814@columbia.edu"}
]
dependencies = [
    "torch",
    "geoopt>=0.5.1",
    "numpy",
    "tqdm",
    "cvxpy",
    "scikit-learn==1.5.1",
    "datasets"
]

[project.optional-dependencies]
dev = [
    "mypy",
    "jaxtyping",
    "beartype",
    "pytest",
    "pytest-cov",
    "pytest-env",
    "black",
    "isort",
    "pylint",
    "pydocstyle"
]
docs = [
  "mkdocs",
  "mkdocs-material",
  "mkdocstrings[python]",
  "mkdocs-autorefs",
  "mkdocs-gen-files",
  "griffe"
]

[tool.setuptools]
packages = ["manify"]

[tool.setuptools.package-data]
"manify" = ["../data/**/*"]

# =============================================================================
# CI/CD Tool Configuration
# =============================================================================

# Code formatting with Black
[tool.black]
line-length = 120
target-version = ["py310"]

# Import sorting with isort
[tool.isort]
profile = "black"
line_length = 120
skip = ["manify/optimizers/_adan.py"]  # Use unmodified adan.py code from original repo

# Static analysis with Pylint
[tool.pylint.master]
init-hook = "import sys; sys.path.append('.')"
fail-under = 8.0
ignore = "__pycache__,.git,venv"

[tool.pylint.reports]
output-format = "colorized"

[tool.pylint.format]
max-line-length = 120

[tool.pylint."MESSAGES CONTROL"]
disable = ["invalid-name"]

[tool.pylint.basic]
good-names = "i,j,k,ex,Run,_,fp"
argument-rgx = "[a-z_][a-z0-9_]{2,30}$"
variable-rgx = "[a-z_][a-z0-9_]{2,30}$"
class-rgx = "[A-Z][a-zA-Z0-9]+$"
const-rgx = "(([A-Z_][A-Z0-9_]*)|(__.*__))"
module-rgx = "([a-z_][a-z0-9_]*)"

[tool.pylint.typecheck]
generated-members = "torch.*,nn.*"

# Type checking with MyPy
[tool.mypy]
packages = ["manify"]
exclude = ["manify/optimizers/_adan.py"]  # Use unmodified adan.py code from original repo
python_version = "3.10"
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_ignores = false
follow_imports = "skip"
ignore_missing_imports = true
disable_error_code = ["name-defined"]  # Needed for jaxtyping compatibility - else vector annotations fail

# Unit testing with pytest
[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "--jaxtyping-packages=beartype.beartype"
python_files = "test_*.py"
env = ["BEARTYPE_ENABLE=true"]

# Code coverage
[tool.coverage.run]
source = ["manify"]
branch = true
omit = ["manify/optimizers/_adan.py"]  # Exclude from coverage reporting

[tool.coverage.report]
# fail_under = 80

[tool.coverage.xml]
output = "coverage.xml"

# Docstring style checking with pydocstyle
[tool.pydocstyle]
convention = "google"
add_ignore = ["D107"]
match = "(?!_adan).*\\.py$"  # Exclude _adan.py from docstring checks